// FILE: queue3.template
// TEMPLATE CLASS IMPLEMENTED: Queue<Item> (see queue2.h for documentation)
// This file is included in the header file, and not compiled separately.
// INVARIANT for the Queue class:
//   1. The number of items in the queue is stored in the member variable
//      count.
//   2. The items in the queue are stored in a linked list, with the front of
//      the queue stored at the head node, and the rear of the queue stored at
//      the final node.
//   3. The member variable front_ptr is the head pointer of the linked list of
//      items. For a non-empty queue, the member variable rear_ptr is the
//      tail pointer of the linked list; for an empty list, we don't care
//      what's stored in rear_ptr.

#include <cassert>   // Provides assert
#include "node2.h"   // Node template class

namespace main_savitch_8C
{
	template <class Item>
	queue<Item>::queue()
	{
		count = 0;
		rear_ptr = NULL;
	}

	template <class Item>
	queue<Item>::queue(const queue<Item>& source)
		// Library facilities used: node2.h
	{
		count = source.count;

		// temporarily break the cycle
		main_savitch_6B::node<Item>* source_first = source.rear_ptr->link();
		source.rear_ptr->set_link(nullptr);

		main_savitch_6B::node<Item>* first_ptr;
		list_copy(source_first, first_ptr, rear_ptr);
		rear_ptr->set_link(first_ptr);

		// restore the cycle
		source.rear_ptr->set_link(source_first);
	}

	template <class Item>
	queue<Item>::~queue()
	{
		list_clear(rear_ptr);
	}

	template <class Item>
	void queue<Item>::operator =(const queue<Item>& source)
		// Library facilities used: node2.h
	{
		if (this == &source) // Handle self-assignment
			return;
		list_clear(rear_ptr);
		node<Item>* tmpPtr;
		list_copy(source.rear_ptr, rear_ptr, tmpPtr);
		tmpPtr->set_link(rear_ptr);
		count = source.count;
	}

	template <class Item>
	Item queue<Item>::front() const
		// Library facilities used: cassert
	{
		assert(!empty());
		return rear_ptr->link()->data();
	}

	template <class Item>
	void queue<Item>::pop()
		// Library facilities used: cassert, node2.h
	{
		assert(!empty());		

		main_savitch_6B::node<Item>* tmp_first = rear_ptr->link();
		rear_ptr->set_link(rear_ptr->link()->link());
		delete tmp_first;
		--count;
	}

	template <class Item>
	void queue<Item>::push(const Item& entry)
		// Library facilities used: node2.h
	{
		if (empty())
		{   // Insert first entry.
			list_head_insert(rear_ptr, entry);
			rear_ptr->set_link(rear_ptr);
		}
		else
		{   // Insert an entry that is not the first.
			list_insert(rear_ptr, entry);
			rear_ptr = rear_ptr->link();
		}
		++count;
	}

}
